@startuml
title "Ferrov√≠as"
!theme reddress-darkblue
scale 1.3
'skinparam Linetype ortho
skinparam titleBorderRoundCorner 15
skinparam titleBorderThickness 2
skinparam titleBorderColor #000000
skinparam titleBackgroundColor #FF0000
skinparam defaultFontColor #FFFFFF
skinparam titleFontColor #FFFFFF


class Formacion {
    -ArrayList<Vagon> vagones;
    -ArrayList<Locomotora> locomotoras;

    +getTotalPasajerosTransportables();
    +getCantidadVagonesLivianos();
    +getVelocidadMaxima();
    +boolean esEficiente();
    +boolean puedeMoverse();
    +getKilosDeEmpujeFaltantes();
    +getPesoTotal();
    +getTotalUnidades();
    +boolean esCompleja();
}

class Locomotora {
    -double peso;
    -double pesoDeArrastreMaximo;
    -double velocidadMaxima;
    -Estado estado;

    +getArrastreUtil();
    +boolean esEficiente();
}

enum Estado {
    DETENIDA,
    EN_DEPOSITO,
    EN_MARCHA
}

abstract class Vagon {
    +abstract getPesoMaximo();
    +boolean esLiviano();
    +abstract getCantidadMaximaPasajeros();
}

class VagonDeCarga {
    -double cargaMaxima;

    +getPesoMaximo();
    +getCantidadMaximaPasajeros();
}

class VagonDePasajeros {
    -double largo;
    -double anchoUtil;

    +getPesoMaximo();
    +getCantidadMaximaPasajeros();
}

class Deposito {
    -ArrayList<Formacion> trenes;
    -ArrayList<Locomotora> locomotoras;

    +ArrayList<Vagon> getVagonesPesados();
}



'<<<<<<<<<<<<<< Relaciones <<<<<<<<<<<<<<
Deposito *-- Formacion

Formacion *-- Vagon
Formacion *-r- Locomotora

Vagon <|-l- VagonDeCarga
Vagon <|-- VagonDePasajeros

Locomotora -[hidden]r- Estado



'<<<<<<<<<<<<<< Notas <<<<<<<<<<<<<<

'<<<<<<<<<<<<<< Vagones <<<<<<<<<<<<<<
note right of Vagon::esLiviano
return this.getPesoMaximo < 2500
endnote

note left of VagonDePasajeros::getPesoMaximo
return this.getCantidadMaximaPasajeros() * 80;
endnote

note left of VagonDePasajeros::getCantidadMaximaPasajeros
if(this.anchoUtil <= 2.5)
    return this.largo * 8;
else
    return this.largo * 10;
endnote

note left of VagonDeCarga::getPesoMaximo
return this.cargaMaxima + 160;
endnote

note left of VagonDeCarga::getCantidadMaximaPasajeros
return 0;
endnote

'<<<<<<<<<<<<<< Locomotora <<<<<<<<<<<<<<
note right of Locomotora::getArrastreUtil
return this.pesoDeArrastreMaximo - this.peso;
endnote

note right of Locomotora::esEficiente
return this.getArrastreUtil() > 5 * this.peso;
endnote

'<<<<<<<<<<<<<< Formacion <<<<<<<<<<<<<<
note left of Formacion::getTotalPasajerosTransportables
return vagones.stream()
                      .mapToInt(Vagon::getCantidadMaximaPasajeros)
                      .sum();
endnote

note left of Formacion::getCantidadVagonesLivianos
return vagones.stream()
                      .filter(Vagon::esLiviano)
                      .count();
endnote

note left of Formacion::getVelocidadMaxima
return locomotoras.stream()
                           .mapToDouble(Locomotora::getVelocidadMaxima)
                           .min()
                           .orElse(0.0);
endnote

note left of Formacion::esEficiente
return locomotoras.stream().allMatch(Locomotora::esEficiente);
endnote

note left of Formacion::puedeMoverse
double arrastreTotal = locomotoras.stream()
                                                   .mapToDouble(Locomotora::getArrastreUtil)
                                                   .sum();
double pesoTotal = vagones.stream()
                                        .mapToDouble(Vagon::getPesoMaximo)
                                        .sum();

return arrastreTotal >= pesoTotal;
endnote

note left of Formacion::getKilosDeEmpujeFaltantes
if(this.puedeMoverse())
    return 0;
else {
    double arrastreTotal = locomotoras.stream()
                                                       .mapToDouble(Locomotora::getArrastreUtil)
                                                       .sum();
    double pesoTotal = vagones.stream()
                                            .mapToDouble(Vagon::getPesoMaximo)
                                            .sum();

    return pesoTotal - arrastreTotal;

}
endnote

note left of Formacion::getPesoTotal
double pesoVagones = vagones.stream()
                                              .mapToDouble(Vagon::getPesoMaximo)
                                              .sum();
double pesoLocomotoras = locomotoras.stream()
                                                         .mapToDouble(Locomotora::getPeso)
                                                         .sum();

return pesoVagones + pesoLocomotoras;
endnote

note left of Formacion::getTotalUnidades
return vagones.count() + locomotoras.count();
endnote

note left of Formacion::esCompleja
return this.getPesoTotal() > 10000 || this.getTotalUnidades() > 20;
endnote

'<<<<<<<<<<<<<< Deposito <<<<<<<<<<<<<<
note right of Deposito::getVagonesPesados
return trenes.stream()
                   .map(tren -> tren.vagones().stream()
                                                            .max(Comparator.comparingDouble(Vagon::getPesoMaximo))
                                                            .orElse(null))
                                                            .filter(vagon -> vagon != null)
                                                            .collect(Collectors.toCollection(ArrayList::new));
endnote

@enduml