@startuml
title "ACME S.A."
!theme reddress-darkblue
scale 1.3
skinparam Linetype ortho
skinparam titleBorderRoundCorner 15
skinparam titleBorderThickness 2
skinparam titleBorderColor #C4CBCA
skinparam titleBackgroundColor #0A0F0D
skinparam defaultFontColor #FFFFFF
skinparam titleFontColor #EE4266



class Micro {
    -double volumen;
    -int capacidadSentados;
    -int capacidadParados;
    -ArrayList<Pasajero> pasajeros;

    +int getAsientosLibres();
    +int getLugaresParadosLibres();
    +int getLugaresTotalesLibres();
    +boolean puedeSubir(Pasajero p);
    +subirPasajero(Pasajero p);
    +bajarPasajero(Pasajero p);
    +Pasajero getPrimeroEnSubir();
}

class Pasajero {
    -String nombre;
    -int legajo;
    -Perfil perfil;
    -Pasajero jefe;

    +boolean esJefe();
    +boolean quiereSubir(Micro m);
}

interface Perfil {
    +boolean quiereSubir(Micro m);
}

class Apurado {
    +boolean quiereSubir(Micro m);
}

class Claustrofobico {
    +boolean quiereSubir(Micro m);
}

class Fiaca {
    +boolean quiereSubir(Micro m);
}

class Moderado {
    -int minLugaresLibres;

    +boolean quiereSubir(Micro m);
}

class Obsecuente {
    -Pasajero jefe;

    +boolean quiereSubir(Micro m);
}



'Relaciones
Pasajero -l-> Micro
Pasajero *-- Perfil

Perfil <|.l. Apurado
Perfil <|.. Claustrofobico
Perfil <|.. Fiaca
Perfil <|.. Moderado
Perfil <|.r. Obsecuente


'Notas
'Perfiles
note bottom of Apurado: return true;

note bottom of Claustrofobico: return m.volumen > 120;

note bottom of Fiaca: return m.getAsientosLibres() > 0;

note bottom of Moderado: return this.minLugaresLibres <= m.getLugaresTotalesLibres();

note bottom of Obsecuente: return this.jefe.quiereSubir(m);

'Pasajero
note right of Pasajero::esJefe
return this.jefe == null;
endnote

note right of Pasajero::quiereSubir
return this.perfil.quiereSubir(m);
endnote

'Micro
note as N1
Asumo que a medida que los pasajeros se suben
al micro van ocupando primero los asientos libres
endnote
Micro -u- N1

note left of Micro::getAsientosLibres
int asientosLibres = this.capacidadSentados - this.pasajeros.count();
if(asientosLibres <= 0)
    asientosLibres = 0;
return asientosLibres;
endnote

note left of Micro::getLugaresParadosLibres
int lugaresLibres = this.capacidadParados;
if(this.getAsientosLibres() == 0)
    lugaresLibres -= (this.pasajeros.count() - this.capacidadSentados);
if(lugaresLibres <= 0)
    lugaresLibres = 0;
return lugaresLibres;
endnote

@enduml